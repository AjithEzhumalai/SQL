--1. Database Schema:

CREATE TABLE movies (
  movie_id INT PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  genre VARCHAR(100)
);

CREATE TABLE users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL
);

CREATE TABLE ratings (
  user_id INT REFERENCES users(user_id),
  movie_id INT REFERENCES movies(movie_id),
  rating INT NOT NULL,
  PRIMARY KEY (user_id, movie_id)
);

-- 2. Find users with similar taste:

SELECT u1.username, u2.username
FROM users u1
INNER JOIN ratings r1 ON u1.user_id = r1.user_id
INNER JOIN ratings r2 ON r1.movie_id = r2.movie_id AND u1.user_id != r2.user_id
INNER JOIN users u2 ON r2.user_id = u2.user_id
GROUP BY u1.username, u2.username
HAVING COUNT(*) > 1;

-- 3. Recommend movies:

WITH similar_users AS (
  SELECT u1.user_id, u2.user_id
  FROM users u1
  INNER JOIN ratings r1 ON u1.user_id = r1.user_id
  INNER JOIN ratings r2 ON r1.movie_id = r2.movie_id AND u1.user_id != r2.user_id
  INNER JOIN users u2 ON r2.user_id = u2.user_id
  GROUP BY u1.user_id, u2.user_id
  HAVING COUNT(*) > 1
)
SELECT m.title
FROM movies m
INNER JOIN ratings r ON m.movie_id = r.movie_id
INNER JOIN similar_users su ON r.user_id = su.user_id
WHERE su.user_id = (SELECT user_id FROM users WHERE username = 'YOUR_USERNAME');

/*
Further Enhancements:

Include additional movie data (e.g., director, release year).
Implement more sophisticated recommendation algorithms (e.g., content-based filtering).
Visualize results using a data visualization tool like Tableau.
*/
